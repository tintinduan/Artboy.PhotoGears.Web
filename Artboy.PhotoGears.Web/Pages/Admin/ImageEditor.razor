
<style>
    div.validation-message {
        color: rgb(220,53,69);
        font-weight: 500
    }
</style>
@if (ShowDialog)
{<div class="modal fade show d-block" id="exampleModal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="bg-@ThemeColor text-white text-center">@TitleText an Image</h3>
                    <button type="button" class="close" @onclick="@Close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body">
                    @if(Image != null)
                    { 
                        <EditForm Model="Image" OnValidSubmit="SaveImage">
                            <DataAnnotationsValidator />
                            <div class="form-group row">
                                <label class="col-sm-3 col-form-label">Title</label>
                                <ValidationMessage For="@(()=>Image.Title)" />
                                <InputText class="form-control col-sm-8" @bind-Value="Image.Title" />
                            </div>
                            <div class="form-group row">
                                <label class="col-sm-3 col-form-label">Image Category</label>
                                <ValidationMessage For="@(()=>Image.ImageCategory)" />
                                <InputSelect @bind-Value="Image.ImageCategory" class="form-control col-sm-8">
                                    @foreach (ImageCategoryEnum item in Enum.GetValues(typeof(ImageCategoryEnum)))
                                        {
                                        <option value="@item">@item.GetDescription()</option>
                                        }
                                </InputSelect>
                            </div>
                            @if (Image.Id == 0)
                            {
                                <div class="form-group row">
                                    <label class="col-sm-3 col-form-label">Image</label>
                                    <ValidationMessage For="@(()=>Image.ImageUrl)" />
                                    <InputFile OnChange="UploadChanged" class="form-control col-sm-8"></InputFile>
                                </div>
                            }
                            else
                            {
                            
                                <div class="form-group row">
                                    <label class="col-sm-3 col-form-label">Image Url</label>
                                    <input class="form-control col-sm-8" disabled value="@Image.ImageUrl" />
                                </div>
                                <div class="form-group row">
                                    <label class="col-sm-3 col-form-label">Is Image Used</label>
                                    <InputCheckbox class="form-check" disabled @bind-Value="@Image.IsUsed" />
                                </div>
                            }


                            <button type="submit" class="btn btn-@ThemeColor">Save</button>
                            <a class="btn btn-secondary" @onclick="@Close">Cancel</a>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>

}
@code {
    IBrowserFile selectedFile;
    [Inject]
    public IWebHostEnvironment WebHostEnv { get; set; }
    [Inject]
    public IGenericRepository<GearImage> Repository { get; set; }
    [Inject]
    public NavigationManager NavManager { get; set; }
    [Parameter]
    public long Id { get; set; } = 0;
    [Parameter]
    public GearImage Image { get; set; } = new GearImage();

    public bool ShowDialog
    {
        get;
        set;
    }
    [Parameter]
    public EventCallback<bool> CloseEventCallback
    {
        get;
        set;
    }
    public void Show()
    {
        ResetDialog();
        ShowDialog = true;
        StateHasChanged();
    }
    public void Close()
    {
        ResetDialog();

        ShowDialog = false;
        StateHasChanged();
        NavManager.NavigateTo("/admin/images", true);
    }
    private void ResetDialog()
    {
        if (Id == 0)
        {
            Image = new GearImage();
        }
        else
        {
            Repository.RejectChanges();
        }
    }

    void UploadChanged(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        Image.ImageUrl = e.File.Name;
    }

    protected async override Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            Image = await Repository.GetOneAsync(Id);
        }
    }
    protected async Task SaveImageToFolder()
    {
        Stream stream = selectedFile.OpenReadStream(10240000);

        string rootPath = $"{WebHostEnv.WebRootPath}\\Images\\{Image.ImageCategory.ToString()}\\";
        string path = Path.Combine(rootPath, Image.ImageUrl);
        Image.ImageUrl = $"\\Images\\{Image.ImageCategory.ToString()}\\{Image.ImageUrl}";
        FileStream fs = File.Create(path);
        await stream.CopyToAsync(fs);
        stream.Close();
        fs.Close();
    }
    protected async Task SaveImage()
    {
        if (Id == 0)
        {
            await SaveImageToFolder();
            await Repository.CreateNewAsync(Image);
        }
        else
        {
            await Repository.UpdateOneAsync(Image);
        }

        ShowDialog = false;
        StateHasChanged();
        NavManager.NavigateTo("/admin/images", true);
    }
    public string ThemeColor => Id == 0 ? "primary" : "warning";
    public string TitleText => Id == 0 ? "Create" : "Edit";
}
