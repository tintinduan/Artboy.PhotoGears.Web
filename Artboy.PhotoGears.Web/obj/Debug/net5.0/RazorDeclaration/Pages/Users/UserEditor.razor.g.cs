// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Artboy.PhotoGears.Web.Pages.Users
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
    public partial class UserEditor : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 57 "C:\CodeBase\Projects\Artboy.PhotoGears.Web\Artboy.PhotoGears.Web\Pages\Users\UserEditor.razor"
       
    [Inject]
    public UserManager<IdentityUser> UserManager { get; set; }
    [Inject]
    public NavigationManager NavManager { get; set; }
    [Parameter]
    [Required]
    public string Id { get; set; } = "";
    [Parameter]
    public IdentityUser User { get; set; } = new IdentityUser();

    [Required]
    public string UserName { get; set; }

    [Required]
    [EmailAddress]
    public string Email { get; set; }

    public string Password { get; set; }

    public bool ShowDialog
    {
        get;
        set;
    }

    public void Show()
    {
        ResetDialog();
        ShowDialog = true;
        StateHasChanged();
    }
    public void Close()
    {
        ResetDialog();

        ShowDialog = false;
        StateHasChanged();
        NavManager.NavigateTo("/users", true);
    }
    private void ResetDialog()
    {
        if (Id == "")
        {
            User = new IdentityUser();
        }
    }


    protected async override Task OnParametersSetAsync()
    {
        if (Id != "")
        {
            User = await UserManager.FindByIdAsync(Id);
            Id = User.Id;
            UserName = User.UserName;
            Email = User.Email;
        }
    }
    protected async Task SaveUser()
    {
        if (Id == "")
        {
            IdentityUser user = new IdentityUser
            {
                UserName = UserName,
                Email = Email
            };
            IdentityResult result =
                await UserManager.CreateAsync(user, Password);
            if (result.Succeeded)
            {
                ShowDialog = false;
                StateHasChanged();
                NavManager.NavigateTo("/users", true);
            }
        }
        else
        {
            IdentityUser user = await UserManager.FindByIdAsync(Id);
            user.UserName = UserName;
            user.Email = Email;
            IdentityResult result = await UserManager.UpdateAsync(user);
            if (result.Succeeded && !String.IsNullOrEmpty(Password))
            {
                await UserManager.RemovePasswordAsync(user);
                result = await UserManager.AddPasswordAsync(user, Password);
            }
            if (result.Succeeded)
            {
                ShowDialog = false;
                StateHasChanged();
                NavManager.NavigateTo("/users", true);
            }
        }
        ShowDialog = false;
        StateHasChanged();
        NavManager.NavigateTo("/admin/mounts", true);
    }
    public string ThemeColor => Id == "" ? "primary" : "warning";
    public string TitleText => Id == "" ? "Create" : "Edit";

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
